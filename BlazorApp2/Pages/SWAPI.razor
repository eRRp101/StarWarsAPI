@page "/SWAPI"
@inject ISWAPIService _swapiService;

<PageTitle>Star Wars Characters</PageTitle>

<div class="component-background">

    @* --- Header as Loading Indicator --- *@
    <div class="loader-container">
        <div class="title-loader">
            <h1 class="@((isLoading || IsFiltering) ? "loading-title" : "h1-sw")">Star Wars Characters</h1>
            <div class="loading-text">
                @if (isLoading || IsFiltering)
                {
                    @(isLoading ? "Fetching Data..." : "Filtering Data...")
                }
                <!-- Empty -->
                &nbsp;
            </div>
        </div>
    </div>
    <hr />
    <div class="mb-3 ">
        <button class="btn-sw" @onclick="ClearFilters">Reset all filters</button>
    </div>
    <table class="star-wars-table" style="width: 100%; table-layout: fixed">
        <thead>
            <tr>
                <th>
                    <div style="display: flex; align-items: baseline; gap: 200px;">
                        Name
                        <input class="form-control"
                        type="text"
                        @bind="_inputFilterName"
                        @bind:event="oninput"
                        @bind:after="ApplyFiltersAsync"
                        placeholder="Filter by name..." />
                    </div>
                </th>
                <th>
                    <div style="display: flex; align-items: baseline; gap: 200px;">
                        Height
                        <input class="form-control"
                        type="text"
                        @bind="_inputFilterHeight"
                        @bind:event="oninput"
                        @bind:after="ApplyFiltersAsync"
                        placeholder="Filter by height..." />
                    </div>
                </th>
                <th>
                    <div style="display: flex; align-items: baseline; gap: 200px;">
                        Mass
                        <input class="form-control"
                        type="text"
                        @bind="_inputFilterMass"
                        @bind:event="oninput"
                        @bind:after="ApplyFiltersAsync"
                        placeholder="Filter by mass..." />
                    </div>
                </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var person in _paginatedPersonList)
            {
                <tr @onclick="() => ToggleDetails(person)">
                    <td>@person.Name</td>
                    <td>@person.Height</td>
                    <td>@person.Mass</td>
                </tr>
            }
        </tbody>
    </table>


    <!-- Modal Overlay -->
    <div class="modal-sw-overlay @(isModalVisible ? "show" : "")" @onclick="CloseModal">
        <div class="modal-sw-content" @onclick:stopPropagation>
            <h2>@(_selectedPerson?.Name ?? "No Name")</h2>
            @if (_selectedPerson != null)
            {
                <div>
                    @_selectedPerson.Name is a @_selectedPerson.Height cm tall @_selectedPerson.Gender, born in @_selectedPerson.BirthYear.
                    Characteristics include @_selectedPerson.HairColor hair, @_selectedPerson.EyeColor eyes, and a @_selectedPerson.SkinColor skin color.
                </div>
            }
        </div>
    </div>
    }

    <div class="text-center m-3">
        <button class="btn-sw" @onclick="PreviousPage" disabled="@(!CanGoToPreviousPage)">Previous</button>
        <span class="mx-2">Page @CurrentPage of @TotalPages</span>
        <button class="btn-sw" @onclick="NextPage" disabled="@(!CanGoToNextPage)">Next</button>
    </div>
    <hr />
</div>



@code {
    //Pagination
    private int PageSize { get; set; } = 10;
    private int CurrentPage { get; set; } = 1;
    private List<People> _paginatedPersonList = new();
    private bool CanGoToPreviousPage => CurrentPage > 1;
    private bool CanGoToNextPage => CurrentPage < TotalPages;
    private int TotalPages => Math.Max(1, (int)Math.Ceiling((double)_filteredPersonList.Count / PageSize));

    private void LoadPage(int pageNumber)
    {
        var skip = (pageNumber - 1) * PageSize;
        _paginatedPersonList = _filteredPersonList.Skip(skip).Take(PageSize).ToList();
    }

    private void NextPage()
    {
        if (CanGoToNextPage)
        {
            CurrentPage++;
            LoadPage(CurrentPage);
        }
    }

    private void PreviousPage()
    {
        if (CanGoToPreviousPage)
        {
            CurrentPage--;
            LoadPage(CurrentPage);
        }
    }

    //Modal
    private People _selectedPerson = null;
    private void ToggleDetails(People person)
    {
        _selectedPerson = (_selectedPerson == person) ? null : person;
        OpenModal();
    }

    private bool isModalVisible = false;

    private void OpenModal()
    {
        isModalVisible = true;
    }

    private void CloseModal()
    {
        isModalVisible = false;
        _selectedPerson = null;
    }

    bool isLoading = false;
    bool IsFiltering = false;

    //Filters
    private string? _inputFilterName;
    private string? _inputFilterHeight;
    private string? _inputFilterMass;

    //
    private List<People> _personList = new();
    private List<People> _filteredPersonList = new();

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        _personList = await _swapiService.GetPeopleList();
        _filteredPersonList = new List<People>(_personList);
        LoadPage(CurrentPage);
        isLoading = false;
        await base.OnInitializedAsync();
    }

    //Search Filters
    private async Task ApplyFiltersAsync()
    {
        IsFiltering = true;
        await Task.Delay(500); //Debouncing som vi snakkede om
        _filteredPersonList = await _swapiService.FilterPeopleList(_personList,
            _inputFilterName, _inputFilterHeight, _inputFilterMass);

        CurrentPage = 1;
        LoadPage(CurrentPage);

        IsFiltering = false;
    }

    private async Task ClearFilters()
    {
        _inputFilterName = string.Empty;
        _inputFilterHeight = string.Empty;
        _inputFilterMass = string.Empty;
        _filteredPersonList = new List<People>(_personList);

        LoadPage(CurrentPage);
    }
}
