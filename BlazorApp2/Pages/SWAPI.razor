@page "/SWAPI"
@inject ISWAPIService _swapiService;
@inject IDebounceService _debounceService;
@inject ApiExceptionService _apiExceptionService;

<PageTitle>Star Wars Characters</PageTitle>

@if (_errorMessage != null)
{
    <div class="modal-sw-content">
        @_errorMessage
    </div>
}

<div class="component-background">

    @* --- Header Glowing+SubText as Loading Indicators --- *@
    <div class="loader-container">
        <div class="title-loader">
            <h1 class="@((isLoading || IsFiltering) ? "loading-title" : "h1-sw")">Star Wars Characters</h1>
            <div class="loading-text">
                @if (isLoading || IsFiltering)
                {
                    @(isLoading ? "Fetching Data..." : "Filtering Data...")
                }
                <!-- Empty -->
                &nbsp;
            </div>
        </div>
    </div>
    <hr />
    <div class="mb-3 ">
        <button class="btn-sw" @onclick="ClearFilters">Reset all filters</button>
    </div>
    <table class="star-wars-table" style="width: 100%; table-layout: fixed">
        <thead>
            <tr>
                <th>
                    <div class="header-container-sw">
                        <span class="fs-5">Name</span>
                        <div class="search-field-sw">
                            <input class="form-control"
                            type="text"
                            @bind="_inputFilterName"
                            @bind:event="oninput"
                            @bind:after="ApplyFiltersAsync"
                            placeholder="Search by name..." />
                        </div>
                    </div>
                </th>
                <th>
                    <div class="header-container-sw">
                        <span class="fs-5">Height</span>
                        <div class="search-field-sw">
                            <input class="form-control"
                            type="text"
                            @bind="_inputFilterHeight"
                            @bind:event="oninput"
                            @bind:after="ApplyFiltersAsync"
                            placeholder="Search by height..." />
                        </div>
                    </div>
                </th>
                <th>
                    <div class="header-container-sw">
                        <span class="fs-5">Mass</span>
                        <div class="search-field-sw">
                            <input class="form-control"
                            type="text"
                            @bind="_inputFilterMass"
                            @bind:event="oninput"
                            @bind:after="ApplyFiltersAsync"
                            placeholder="Search by mass..." />
                        </div>
                    </div>
                </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var person in _paginatedPersonList)
            {
                <tr @onclick="() => ToggleDetails(person)">
                    <td>@person.Name</td>
                    <td>@person.Height</td>
                    <td>@person.Mass</td>
                </tr>
            }
        </tbody>
    </table>

    <!-- Modal Overlay -->
    <div class="modal-sw-overlay @(isModalVisible ? "show" : "")" @onclick="CloseModal">
        <div class="modal-sw-content" @onclick:stopPropagation>
            <h2>@(_selectedModalPerson?.Name ?? "")</h2>
            @if (_selectedModalPerson != null)
            {
                <div>
                    <img src="@_selectedModalPerson.ImgSrc" />
                    <hr/>
                    <span>Species:     @_selectedModalPerson</span><br />
                    <span>Homeworld:     @_selectedModalPerson</span><br />

                    <span>Gender:     @_selectedModalPerson.Gender</span><br />
                    <span>Birthyear: @_selectedModalPerson.BirthYear</span><br />
                    <span>Height: @_selectedModalPerson.Height</span><br />
                    <span>Mass: @_selectedModalPerson.Mass</span><br />
                    <hr/>
                </div>
            }
        </div>
    </div>

    <div class="text-center m-3">
        <button class="btn-sw" @onclick="PreviousPage" disabled="@(!CanGoToPreviousPage)">Previous</button>
        <span class="mx-2 text-white">Page @CurrentPage of @TotalPages</span>
        <button class="btn-sw" @onclick="NextPage" disabled="@(!CanGoToNextPage)">Next</button>
    </div>
    <hr />
</div>



@code {
    //Pagination
    private int PageSize { get; set; } = 10;
    private int CurrentPage { get; set; } = 1;
    private List<People> _paginatedPersonList = new();
    private bool CanGoToPreviousPage => CurrentPage > 1;
    private bool CanGoToNextPage => CurrentPage < TotalPages;
    private int TotalPages => Math.Max(1, (int)Math.Ceiling((double)_filteredPersonList.Count / PageSize));

    private void LoadPage(int pageNumber)
    {
        var skip = (pageNumber - 1) * PageSize;
        _paginatedPersonList = _filteredPersonList.Skip(skip).Take(PageSize).ToList();
    }

    private void NextPage()
    {
        if (CanGoToNextPage)
        {
            CurrentPage++;
            LoadPage(CurrentPage);
        }
    }

    private void PreviousPage()
    {
        if (CanGoToPreviousPage)
        {
            CurrentPage--;
            LoadPage(CurrentPage);
        }
    }

    //Modal
    private People _selectedModalPerson = null;
    private bool isModalVisible = false;

    private void ToggleDetails(People person)
    {
        _selectedModalPerson = (_selectedModalPerson == person) ? null : person;
        OpenModal();
    }

    private void OpenModal()
    {
        isModalVisible = true;
    }

    private void CloseModal()
    {
        isModalVisible = false;
        _selectedModalPerson = null;
    }

    //UI State
    private bool isLoading = false;
    private bool IsFiltering = false;
    private string _errorMessage = String.Empty;

    //Filters
    private string? _inputFilterName;
    private string? _inputFilterHeight;
    private string? _inputFilterMass;

    private void ClearFilters()
    {
        _inputFilterName = string.Empty;
        _inputFilterHeight = string.Empty;
        _inputFilterMass = string.Empty;
        _filteredPersonList = new List<People>(_personList);

        LoadPage(CurrentPage);
    }

    private async Task ApplyFiltersAsync()
    {
        await _debounceService.DebounceAsync(async () =>
        {
            IsFiltering = true;
            _filteredPersonList = await _swapiService.FilterPeopleList(_personList, _inputFilterName, _inputFilterHeight, _inputFilterMass);
            CurrentPage = 1;
            LoadPage(CurrentPage);
        });
        IsFiltering = false;
    }

    //
    private List<People> _personList = new();
    private List<People> _filteredPersonList = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            isLoading = true;
            StateHasChanged();
            // Task.Delay(2000); //loading animation display
            _personList = await _swapiService.GetPeopleList();
            _filteredPersonList = new List<People>(_personList);
            _debounceService = new DebounceService();
            LoadPage(CurrentPage);
            isLoading = false;
            await base.OnInitializedAsync();
        }
        catch (ApiServiceException ex)
        {
            _errorMessage = _apiExceptionService.GetUserFriendlyErrorMessage(ex);
        }
        catch (Exception ex)
        {
            _errorMessage = "An unexpected error occurred. Please try again later.";
        }
    }
}
