@page "/SWAPI"
@inject ISWAPIService _swapiService;

<PageTitle>Star Wars Characters</PageTitle>

<h1 class="text-center">Star Wars Characters</h1>

<div class="text-start mb-2 ms-2">
    <button class="btn btn-primary" @onclick="ClearFilters">Reset Filters</button>
</div>

<hr class="border-primary" />

<table class="table table-striped">
    <thead>
        <tr>
            <th>
                <input class="form-control mb-3"
                type="text"
                @bind="_inputFilterName"
                @bind:event="oninput"
                @bind:after="ApplyFiltersAsync"
                placeholder="Filter name..." />
            </th>
            <th>
                <input class="form-control mb-3"
                type="text"
                @bind="_inputFilterHeight"
                @bind:event="oninput"
                @bind:after="ApplyFiltersAsync"
                placeholder="Filter height..." />
            </th>
            <th>
                <input class="form-control mb-3"
                type="text"
                @bind="_inputFilterMass"
                @bind:event="oninput"
                @bind:after="ApplyFiltersAsync"
                placeholder="Filter mass..." />
            </th>
        </tr>
    </thead>
</table>



@* --- Loading --- *@
@if (isLoading || IsFiltering)
{
    <div class="text-center">
        <div class="spinner-border" role="status"></div>
        <div>@(isLoading ? "Fetching Data..." : "Filtering Data...")</div>
    </div>
}

<table class="table table-striped table-bordered table-hover" style="width: 100%; table-layout: fixed">
    <thead>
        <tr style="background-color: #e3e3e3">
            <th>Name</th>
            <th>Height</th>
            <th>Mass</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var person in _paginatedPersonList)
        {
            <tr @onclick="() => ToggleDetails(person)"
                class="@(person == _selectedPerson ? "table-active" : "")"
                style="font-weight: @(person == _selectedPerson ? "bold" : "normal");
                background-color: @(person == _selectedPerson ? "#b8d7fc" : "transparent")">

                <td>@person.Name</td>
                <td>@person.Height</td>
                <td>@person.Mass</td>
            </tr>
            <tr class="accordion-row @(person == _selectedPerson ? "show" : "")">
                <td colspan="3" class="accordion-content"  style="font-size: 17px; font-weight: 500">

                    <span class="oi oi-star" aria-hidden="true" style="margin-right: 10px; color: black)"></span>
                    @person.Name is a @person.Height cm tall @person.Gender, born in @person.BirthYear.
                    Characteristics include @person.HairColor hair, @person.EyeColor eyes, and a @person.SkinColor skin color.
                </td>
            </tr>
        }
    </tbody>
</table>

<hr/>

<div class="text-center">
    <button class="btn btn-primary" @onclick="PreviousPage" disabled="@(!CanGoToPreviousPage)">Previous</button>
    <span class="mx-2">Page @CurrentPage of @TotalPages</span>
    <button class="btn btn-primary" @onclick="NextPage" disabled="@(!CanGoToNextPage)">Next</button>
</div>

@code {
    //Pagination
    private int PageSize { get; set; } = 10;
    private int CurrentPage { get; set; } = 1;
    private List<People> _paginatedPersonList = new();
    private bool CanGoToPreviousPage => CurrentPage > 1;
    private bool CanGoToNextPage => CurrentPage < TotalPages;
    private int TotalPages => Math.Max(1, (int)Math.Ceiling((double)_filteredPersonList.Count / PageSize));

    private void LoadPage(int pageNumber)
    {
        var skip = (pageNumber - 1) * PageSize;
        _paginatedPersonList = _filteredPersonList.Skip(skip).Take(PageSize).ToList();
    }

    private void NextPage()
    {
        if (CanGoToNextPage)
        {
            CurrentPage++;
            LoadPage(CurrentPage);
        }
    }

    private void PreviousPage()
    {
        if (CanGoToPreviousPage)
        {
            CurrentPage--;
            LoadPage(CurrentPage);
        }
    }

    //Onclick row toggle
    private People _selectedPerson = null;
    private void ToggleDetails(People person)
    {
        _selectedPerson = (_selectedPerson == person) ? null : person;
    }

    bool isLoading = false;
    bool IsFiltering = false;

    //Filters
    private string? _inputFilterName;
    private string? _inputFilterHeight;
    private string? _inputFilterMass;


    private List<People> _personList = new();
    private List<People> _filteredPersonList = new();

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        _personList = await _swapiService.GetPeopleList();
        _filteredPersonList = new List<People>(_personList);
        LoadPage(CurrentPage);
        isLoading = false;
        await base.OnInitializedAsync();
    }

    //Search Filters - fik styr på en bedre søgningstilgang end den beskrevet i mail
    private async Task ApplyFiltersAsync()
    {
        IsFiltering = true;
        await Task.Delay(500); //Debouncing som vi snakkede om
        _filteredPersonList = await _swapiService.FilterPeopleList(
            _inputFilterName, _inputFilterHeight, _inputFilterMass);

        CurrentPage = 1;
        LoadPage(CurrentPage);

        IsFiltering = false;
    }

    private async Task ClearFilters()
    {
        _inputFilterName = string.Empty;
        _inputFilterHeight = string.Empty;
        _inputFilterMass = string.Empty;
        _filteredPersonList = new List<People>(_personList);

        LoadPage(CurrentPage);
    }
}
